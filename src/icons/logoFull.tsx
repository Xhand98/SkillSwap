import { SkillSwapFullContent } from "@/components/types";
import { cn } from "@/lib/utils";

export default function SkillSwapFull({
  className,
  width = 314, // Default width matching original SVG
  height = 130, // Default height matching original SVG
  size, // Optional single size prop for square dimensions
  ...rest
}: SkillSwapFullContent) {
  // If size is provided, use it for both width and height
  const finalWidth = size ?? width;
  const finalHeight = size ? size * (130 / 314) : height; // Maintain aspect ratio if size is provided

  return (
    <svg
      width={finalWidth}
      height={finalHeight}
      viewBox="0 0 314 130" // Keep original viewBox to maintain proportions
      fill="none"
      className={cn("inline-block", className)} // Changed from aspect-square to inline-block
      {...rest}
      xmlns="http://www.w3.org/2000/svg"
      preserveAspectRatio="xMidYMid meet" // Ensure proper scaling
    >
      <g filter="url(#filter0_i_246_726)">
        <path
          d="M45.8564 21.2285L114.618 63.7963L38.5941 95.2285L45.8564 21.2285Z"
          fill="#6E34F3"
        />
      </g>
      <path
        d="M143.314 59.6667C149.205 61.4762 151.789 64.1528 151.789 68.6766C151.789 73.4266 148.293 76.8948 142.06 76.8948C135.029 76.8948 131 72.7857 131 72.7857L134.345 68.375C134.345 68.375 137.803 71.127 141.756 71.127C144.226 71.127 145.062 70.2976 145.062 69.1667C145.062 67.8849 144.112 66.9048 139.817 65.5476C134.573 63.8889 131.95 61.1746 131.95 56.9901C131.95 52.2024 135.257 48.8849 141.262 48.8849C147.267 48.8849 151.067 51.7123 151.067 51.7123L148.255 56.5754C148.255 56.5754 145.29 54.6528 141.87 54.6528C139.475 54.6528 138.639 55.4444 138.639 56.5377C138.639 57.5556 139.589 58.498 143.314 59.6667ZM173.837 56.3492L168.25 65.623L174.179 76.4425H166.844L163.043 69.129C162.625 68.3373 162.169 68.1488 161.143 68.1488V76.4425H154.796V47.7163H161.143V63.1726C162.093 63.1726 162.473 62.9464 162.853 62.4187L166.464 56.3492H173.837ZM183.65 50.3929C183.65 52.5417 182.396 53.748 179.926 53.748C177.455 53.748 176.239 52.5417 176.239 50.3929C176.239 48.2064 177.455 47 179.926 47C182.434 47 183.65 48.1687 183.65 50.3929ZM183.27 76.4425H176.619V56.3492H183.27V76.4425ZM187.903 71.2024V47.7163H194.554V71.0516C194.554 72.5972 194.934 72.9742 195.884 72.9742C196.454 72.9742 196.948 72.8611 197.215 72.7857L198.203 75.9901C197.024 76.5179 195.39 76.8948 193.186 76.8948C189.955 76.8948 187.903 74.8968 187.903 71.2024ZM200.522 71.2024V47.7163H207.173V71.0516C207.173 72.5972 207.553 72.9742 208.503 72.9742C209.073 72.9742 209.567 72.8611 209.833 72.7857L210.822 75.9901C209.643 76.5179 208.009 76.8948 205.805 76.8948C202.574 76.8948 200.522 74.8968 200.522 71.2024ZM223.669 59.6667C229.56 61.4762 232.144 64.1528 232.144 68.6766C232.144 73.4266 228.647 76.8948 222.414 76.8948C215.383 76.8948 211.355 72.7857 211.355 72.7857L214.699 68.375C214.699 68.375 218.158 71.127 222.11 71.127C224.581 71.127 225.417 70.2976 225.417 69.1667C225.417 67.8849 224.467 66.9048 220.172 65.5476C214.927 63.8889 212.305 61.1746 212.305 56.9901C212.305 52.2024 215.611 48.8849 221.616 48.8849C227.621 48.8849 231.422 51.7123 231.422 51.7123L228.609 56.5754C228.609 56.5754 225.645 54.6528 222.224 54.6528C219.83 54.6528 218.994 55.4444 218.994 56.5377C218.994 57.5556 219.944 58.498 223.669 59.6667ZM237.402 76.4425L232.803 56.3492H239.454L241.354 66.9425L241.773 69.9206H241.849C242.039 69.0913 242.267 68.1111 242.571 66.9425L245.649 56.3492H250.362L253.136 66.9425C253.402 68.1488 253.592 69.0913 253.744 69.9206H253.858C253.972 69.0913 254.124 68.0357 254.353 66.9048L256.633 56.3492H263.284L258.039 76.4425H250.4L248.538 68.2619C248.272 66.754 248.082 65.5853 247.968 64.6429H247.854C247.739 65.5853 247.549 66.754 247.245 68.2619L245.079 76.4425H237.402ZM284.782 72.7103L285.771 75.9147C284.706 76.4048 283.034 76.8194 281.324 76.8194C279.005 76.8194 277.371 75.7639 276.649 73.5774V73.4266C275.129 75.5377 272.734 76.8948 269.998 76.8948C266.539 76.8948 264.525 74.8591 264.525 72.0317C264.525 67.8472 268.288 64.002 276.193 63.5873V63.0972C276.193 61.4762 275.319 60.6091 273.761 60.6091C270.302 60.6091 266.844 62.9464 266.844 62.9464L264.639 58.9881C264.639 58.9881 269.2 55.5575 275.433 55.5575C280.336 55.5575 282.616 57.8194 282.616 62.494V70.9385C282.654 72.5218 282.996 72.9365 283.68 72.9365C284.098 72.9365 284.592 72.8234 284.782 72.7103ZM272.164 71.9187C273.609 71.9187 275.205 70.9385 276.193 69.8829V67.244C272.354 67.4702 270.606 69.3175 270.606 70.5238C270.606 71.3532 271.176 71.9187 272.164 71.9187ZM300.475 55.5575C304.693 55.5575 308 58.9127 308 65.7738C308 73.4643 304.579 76.8948 300.019 76.8948C297.586 76.8948 295.724 75.877 294.356 74.6329V85H287.743V56.3492H292.57L293.482 58.8373C294.964 57.1786 297.206 55.5575 300.475 55.5575ZM297.396 71.881C300.019 71.881 301.387 70.5238 301.387 65.7738C301.387 61.8909 300.019 60.5337 297.814 60.5337C296.37 60.5337 295.192 61.0992 294.356 61.627V70.9762C295.116 71.4286 296.142 71.881 297.396 71.881Z"
        fill="white"
      />
      <defs>
        <filter
          id="filter0_i_246_726"
          x="38.5941"
          y="21.2285"
          width="76.0239"
          height="78"
          filterUnits="userSpaceOnUse"
          floodOpacity="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="BackgroundImageFix"
            result="shape"
          />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dy="4" />
          <feGaussianBlur stdDeviation="2" />
          <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1" />
          <feColorMatrix
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"
          />
          <feBlend
            mode="normal"
            in2="shape"
            result="effect1_innerShadow_246_726"
          />
        </filter>
      </defs>
    </svg>
  );
}
