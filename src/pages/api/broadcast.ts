import { NextApiRequest, NextApiResponse } from "next";
import { Server as SocketIOServer } from "socket.io";

// Declaraci√≥n global para acceder a Socket.IO
declare global {
  var __socketIOInstance: SocketIOServer | undefined;
  var __socketIOInitialized: boolean | undefined;
}

// API endpoint con nombre diferente para evitar conflictos con Socket.IO
export default async function broadcastHandler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  console.log("üî• BROADCAST HANDLER EJECUT√ÅNDOSE - M√âTODO:", req.method);
  console.log("üî• URL:", req.url);
  console.log("üî• Headers:", req.headers);

  if (req.method !== "POST") {
    console.log("‚ùå M√©todo no permitido:", req.method);
    return res.status(405).json({ error: "M√©todo no permitido" });
  }

  try {
    const { roomName, eventName, data, authToken } = req.body;
    console.log("üî• Body recibido:", { roomName, eventName, data, authToken });    // Verificaci√≥n b√°sica de autenticaci√≥n
    const expectedToken =
      process.env.SOCKET_AUTH_TOKEN || "default-secret-token";
    console.log("üîë Token esperado:", expectedToken, "| Tipo:", typeof expectedToken, "| Longitud:", expectedToken.length);
    console.log("üîë Token recibido:", authToken, "| Tipo:", typeof authToken, "| Longitud:", authToken?.length);
    console.log("üîë Tokens iguales:", authToken === expectedToken);
    console.log("üîë Comparaci√≥n manual:", JSON.stringify(authToken) === JSON.stringify(expectedToken));
    
    if (!authToken || authToken !== expectedToken) {
      console.log("‚ùå Token inv√°lido");
      return res.status(401).json({ error: "Token de autenticaci√≥n inv√°lido" });
    }

    // Validar par√°metros requeridos
    if (!roomName || !eventName || !data) {
      console.log("‚ùå Par√°metros faltantes");
      return res.status(400).json({
        error: "Par√°metros requeridos: roomName, eventName, data",
      });
    }

    // Verificar disponibilidad de Socket.IO usando variables globales
    console.log("üîç Verificando estado de Socket.IO:");
    console.log("  - __socketIOInitialized:", Boolean(global.__socketIOInitialized));
    console.log("  - __socketIOInstance:", Boolean(global.__socketIOInstance));
    
    if (!global.__socketIOInitialized || !global.__socketIOInstance) {
      console.log("‚ùå Socket.IO no est√° disponible");
      return res.status(500).json({
        error: "Socket.IO no est√° inicializado. Accede a /api/socket primero.",
      });
    }

    // Enviar mensaje usando variables globales
    try {
      console.log("üì° Enviando broadcast...");
      global.__socketIOInstance.to(roomName).emit(eventName, {
        ...data,
        timestamp: new Date().toISOString(),
      });

      console.log(`üì° Broadcast enviado a ${roomName}: ${eventName}`, data);

      res.status(200).json({
        success: true,
        message: "Mensaje enviado exitosamente",
        roomName,
        eventName,
        stats: {
          initialized: true,
          connectedSockets: global.__socketIOInstance.engine.clientsCount,
        },
      });
    } catch (broadcastError) {
      console.error("‚ùå Error en broadcast:", broadcastError);
      return res.status(500).json({
        error: "Error al enviar el mensaje",
        details: broadcastError instanceof Error ? broadcastError.message : "Error desconocido",
      });
    }
  } catch (error) {
    console.error("‚ùå Error al procesar solicitud:", error);
    res.status(500).json({
      error: "Error interno del servidor",
      details: error instanceof Error ? error.message : "Error desconocido",
    });  }
};
