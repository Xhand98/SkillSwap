import { Text } from "@/components/text";
import {
  Heart,
  MessageCircle,
  Repeat2,
  Share,
  User,
  Trash2,
  MoreVertical,
  Calendar,
} from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useAuth } from "@/lib/AuthContext";
import { QuickSchedule } from "./QuickSchedule";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface FeedCardProps {
  title: string;
  description: string;
  tags: string[];
  author: string;
  createdAt?: string;
  likes?: number;
  comments?: number;
  reposts?: number;
  id?: number;
  postId?: number;
  onPostDeleted?: () => void;
}

const FeedCard: React.FC<FeedCardProps> = ({
  title,
  description,
  id,
  postId,
  tags,
  author,
  createdAt = "2h",
  likes = Math.floor(Math.random() * 50),
  comments = Math.floor(Math.random() * 20),
  reposts = Math.floor(Math.random() * 10),
  onPostDeleted,
}) => {
  const { user } = useAuth();
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [hasScheduledSession, setHasScheduledSession] = useState(false);

  const isAdmin = user?.rol === "admin";
  const isAuthor = user?.id === id;
  const canDelete = isAdmin || isAuthor;

  // Añadir la función para verificar si hay sesiones programadas
  useEffect(() => {
    const checkForScheduledSessions = async () => {
      if (!postId || !user || !user.id) return;

      try {
        // Verificar si existe un match
        const matchResponse = await fetch(
          `http://localhost:8000/matches/check?user1=${user.id}&user2=${id}`
        );
        const matchData = await matchResponse.json();

        if (matchData.exists && matchData.match_id) {
          // Si hay match, verificar si hay sesiones programadas
          const sessionsResponse = await fetch(
            `http://localhost:8000/matches/${matchData.match_id}/sessions/`
          );
          const sessionsData = await sessionsResponse.json();

          // Si hay al menos una sesión, actualizamos el estado
          setHasScheduledSession(sessionsData && sessionsData.length > 0);
        }
      } catch (error) {
        console.error("Error al verificar sesiones:", error);
      }
    };

    if (user) {
      checkForScheduledSessions();
    }
  }, [postId, id, user]);

  const handleDeletePost = async () => {
    if (!postId) return;

    setIsDeleting(true);
    try {
      const response = await fetch(`http://localhost:8000/posts/${postId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("auth_token")}`,
        },
      });

      if (response.ok) {
        if (onPostDeleted) onPostDeleted();
      } else {
        console.error("Error al eliminar post:", response.statusText);
        alert("No se pudo eliminar la publicación");
      }
    } catch (error) {
      console.error("Error:", error);
      alert("Error al eliminar la publicación");
    } finally {
      setIsDeleting(false);
      setIsDeleteDialogOpen(false);
    }
  };

  return (
    <article className="border-b border-gray-800 p-4 hover:bg-gray-900/50 transition-colors cursor-pointer">
      <div className="flex gap-3">
        <Avatar className="h-10 w-10 flex-shrink-0">
          <AvatarImage
            src={`https://avatar.vercel.sh/${author}`}
            alt={author}
          />
          <AvatarFallback>{author[0]?.toUpperCase()}</AvatarFallback>
        </Avatar>

        <div className="flex-1 space-y-3">
          <div className="flex items-center gap-2">
            <Link href={`/profiles/${id}`}>
              <Text className="font-bold text-white" size="paragraph-sm">
                {author}
              </Text>
            </Link>
            <Text className="text-gray-500" size="paragraph-xs">
              @{author.toLowerCase().replace(/\s/g, "")}
            </Text>
            <span className="text-gray-500">·</span>
            <Text className="text-gray-500" size="paragraph-xs">
              {createdAt}
            </Text>

            {hasScheduledSession && (
              <div className="ml-2 inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors bg-green-500/20 text-green-500 border-transparent">
                <Calendar className="h-3 w-3 mr-1" />
                <span>Sesión agendada</span>
              </div>
            )}

            {canDelete && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="ml-auto h-8 w-8 p-0"
                  >
                    <MoreVertical className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem
                    onClick={() => setIsDeleteDialogOpen(true)}
                    className="text-red-500 focus:text-red-500 cursor-pointer"
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    <span>Eliminar</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </div>
          <Text
            as="h3"
            size="paragraph-base"
            className="font-semibold text-white"
          >
            {title}
          </Text>
          <Text size="paragraph-sm" className="text-gray-300">
            {description}
          </Text>
          {tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mt-2">
              {tags.map((tag, i) => (
                <span
                  key={i}
                  className="text-sm text-primary bg-primary/10 px-2 py-1 rounded-full text-bold"
                >
                  #{tag.toLowerCase().replace(/\s/g, "")}
                </span>
              ))}
            </div>
          )}{" "}
          <div className="flex justify-between mt-3 text-gray-500 max-w-md">
            <Button
              variant="ghost"
              size="sm"
              className="flex items-center gap-1 text-gray-500 hover:text-pink-500 hover:bg-pink-500/10"
            >
              <Heart size={18} />
              {likes > 0 && <span className="text-xs">{likes}</span>}
            </Button>{" "}
            <Link href={`/matches?postId=${postId}&userId=${id}`}>
              <Button
                variant="ghost"
                size="sm"
                className="flex items-center gap-1 text-gray-500 hover:text-green-500 hover:bg-green-500/10"
              >
                <Repeat2 size={18} />
                <span className="text-xs">Hacer Match</span>
              </Button>
            </Link>
            <QuickSchedule
              postId={postId || 0}
              userId={id || 0}
              postAuthor={author}
            />
          </div>
        </div>
      </div>

      {/* Diálogo de confirmación para eliminar post */}
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>¿Eliminar publicación?</AlertDialogTitle>
            <AlertDialogDescription>
              Esta acción no se puede deshacer. La publicación será eliminada
              permanentemente.
              {isAdmin && !isAuthor && (
                <div className="mt-2 p-2 bg-amber-50 text-amber-800 rounded-md text-sm">
                  Estás eliminando esta publicación como administrador.
                </div>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isDeleting}>
              Cancelar
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeletePost}
              disabled={isDeleting}
              className="bg-red-500 hover:bg-red-600"
            >
              {isDeleting ? "Eliminando..." : "Eliminar"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </article>
  );
};

export default FeedCard;
